{% extends 'gwatch/base.html.twig' %}

{% block title %}Upload Data - SONGBIRD{% endblock %}

{% block body %}
<div class="container mt-4">
    <h2>Upload Module Data</h2>
    
    {% for message in app.flashes('upload_success') %}
        <div class="alert alert-success">
            {{ message }}
        </div>
    {% endfor %}
    
    {% for message in app.flashes('upload_error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}
    
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Create New Module</h3>
                </div>
                <div class="card-body">
                    {{ form_start(form, {'attr': {'enctype': 'multipart/form-data'}}) }}
                        <div class="mb-3">
                            {{ form_label(form.moduleName, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.moduleName, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.moduleName) }}
                        </div>

                        <div class="mb-3">
                            {{ form_label(form.description, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 3}}) }}
                            {{ form_errors(form.description) }}
                        </div>

                        <div class="mb-3">
                            {{ form_label(form.chrFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.chrFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.chrFile) }}
                            <div class="form-text">Upload a CSV file containing chromosome data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.chrsuppFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.chrsuppFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.chrsuppFile) }}
                            <div class="form-text">Upload a CSV file containing chromosome supplement data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.colFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.colFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.colFile) }}
                            <div class="form-text">Upload a CSV file containing column data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.indFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.indFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.indFile) }}
                            <div class="form-text">Upload a CSV file containing index data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.rPvalFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.rPvalFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.rPvalFile) }}
                            <div class="form-text">Upload a CSV file containing R p-value data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.rRatioFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.rRatioFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.rRatioFile) }}
                            <div class="form-text">Upload a CSV file containing R ratio data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.vIndFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.vIndFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.vIndFile) }}
                            <div class="form-text">Upload a CSV file containing variant index data (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.rowFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.rowFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.rowFile) }}
                            <div class="form-text">Upload a CSV file containing row data (creates pos, alias, allele, and maf tables) (required). Maximum file size: 10MB.</div>
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.valFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.valFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.valFile) }}
                            <div class="form-text">Upload a CSV file containing value data (creates pval and ratio tables) (required). Maximum file size: 10MB.</div>
                        </div>

                        <div class="mb-3">
                            {{ form_label(form.densityFiles, null, {'label_attr': {'class': 'form-label'}}) }}
                            <div class="density-files-container" data-prototype="{{ form_widget(form.densityFiles.vars.prototype)|e('html_attr') }}">
                                {% if form.densityFiles|length > 0 %}
                                    {% for densityFile in form.densityFiles %}
                                        <div class="density-file-entry mb-2 d-flex align-items-center">
                                            {{ form_widget(densityFile, {'attr': {'class': 'form-control me-2'}}) }}
                                            {% if loop.index > 1 %}
                                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeDensityFile(this)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            {% endif %}
                                        </div>
                                    {% endfor %}
                                {% else %}
                                    <div class="density-file-entry mb-2 d-flex align-items-center">
                                        <input type="file" name="form[densityFiles][0]" class="form-control me-2" accept=".csv,.txt" />
                                    </div>
                                {% endif %}
                            </div>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="addDensityFile()">
                                <i class="fas fa-plus"></i> Add Another Density File
                            </button>
                            {{ form_errors(form.densityFiles) }}
                            <div class="form-text">Upload density CSV files (e.g., density_1.csv, density_3.csv). Maximum file size: 10MB each.</div>
                        </div>

                        <div class="mb-3">
                            {{ form_label(form.radiusIndFile, null, {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.radiusIndFile, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.radiusIndFile) }}
                            <div class="form-text">Upload a radius index CSV file (e.g., radius_ind.csv) to create radius_ind table. Maximum file size: 10MB.</div>
                        </div>

                        <div class="mb-3 form-check">
                            {{ form_widget(form.makePublic, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.makePublic, null, {'label_attr': {'class': 'form-check-label'}}) }}
                            {{ form_errors(form.makePublic) }}
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">Create Module</button>
                        </div>
                    {{ form_end(form) }}

                    <div class="mt-4">
                        <h5>Guidelines:</h5>
                        <ul class="list-unstyled">
                            <li>✓ Module name and description are required</li>
                            <li>✓ CHR file (CSV format) is required</li>
                            <li>✓ File size limit: 10MB</li>
                            <li>✓ Choose whether to make the module public or private</li>
                        </ul>
                    </div>

                    <div class="mt-3">
                        <a href="{{ path('gwatch_datasets') }}" class="btn btn-outline-secondary">
                            <i class="fas fa-eye"></i> View Active Datasets
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let densityFileIndex = 1;

function addDensityFile() {
    const container = document.querySelector('.density-files-container');
    const prototype = container.dataset.prototype;
    const newEntry = prototype.replace(/__name__/g, densityFileIndex);
    
    const newDiv = document.createElement('div');
    newDiv.className = 'density-file-entry mb-2 d-flex align-items-center';
    newDiv.innerHTML = newEntry;
    
    // Add remove button
    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.className = 'btn btn-outline-danger btn-sm';
    removeButton.onclick = function() { removeDensityFile(this); };
    removeButton.innerHTML = '<i class="fas fa-trash"></i>';
    
    newDiv.appendChild(removeButton);
    container.appendChild(newDiv);
    
    // Add remove button to first entry if it doesn't have one
    const firstEntry = container.querySelector('.density-file-entry:first-child');
    if (firstEntry && !firstEntry.querySelector('.btn-outline-danger')) {
        const firstRemoveButton = document.createElement('button');
        firstRemoveButton.type = 'button';
        firstRemoveButton.className = 'btn btn-outline-danger btn-sm';
        firstRemoveButton.onclick = function() { removeDensityFile(this); };
        firstRemoveButton.innerHTML = '<i class="fas fa-trash"></i>';
        firstEntry.appendChild(firstRemoveButton);
    }
    
    densityFileIndex++;
}

function removeDensityFile(button) {
    const container = document.querySelector('.density-files-container');
    const entries = container.querySelectorAll('.density-file-entry');
    
    if (entries.length > 1) {
        button.parentElement.remove();
        
        // If we removed the first entry and there's only one left, remove the remove button from the remaining entry
        if (entries.length === 2) {
            const remainingEntry = container.querySelector('.density-file-entry');
            const removeButton = remainingEntry.querySelector('.btn-outline-danger');
            if (removeButton) {
                removeButton.remove();
            }
        }
    }
}
</script>
{% endblock %}
