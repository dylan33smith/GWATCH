{% extends 'gwatch/base.html.twig' %}

{% block title %}Active Datasets - SONGBIRD{% endblock %}

{% block body %}
<div class="datasets-container">

    {% if isLoggedIn and userModules is not empty %}
        <div class="datasets-header">
            <h2 class="section-title">User Datasets</h2>
            <p class="text-muted">Your uploaded datasets</p>
        </div>
        
        <div class="modules-list">
            {% for module in userModules %}
                <div class="module-item">
                    <div class="module-box" data-module-id="{{ module.id }}">
                        <div class="module-content">
                            <h5 class="module-title">{{ module.name }}</h5>
                            <div class="module-status">
                                <span class="status-text {% if module.public %}public{% else %}private{% endif %}">
                                    {{ module.public ? 'Public' : 'Private' }}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="sub-modules" id="sub-modules-{{ module.id }}" style="display: none;">
                        <div class="sub-module-box" data-module-id="{{ module.id }}" data-action="highway-browser">
                            <span class="sub-module-text">Highway Browser</span>
                            
                            <!-- Chromosome data container positioned directly underneath -->
                            <div class="chromosome-data" id="chromosome-data-{{ module.id }}" style="display: none;">
                                <div class="chromosome-header">
                                    <h6>Chromosome Data</h6>
                                    <div class="loading-indicator" style="display: none;">
                                        <span>Loading...</span>
                                    </div>
                                </div>
                                <div class="chromosome-content">
                                    <div class="chromosome-table-container">
                                        <table class="chromosome-table">
                                            <thead>
                                                <tr>
                                                    <th>Chromosome</th>
                                                    <th>Name</th>
                                                    <th>Length</th>
                                                </tr>
                                            </thead>
                                            <tbody id="chromosome-tbody-{{ module.id }}">
                                                <!-- Chromosome data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="sub-module-box" data-action="list-tests" data-module-id="{{ module.id }}">
                            <span class="sub-module-text">List of Tests and Manhattan Plots</span>
                            
                            <!-- Tests data container positioned directly underneath -->
                            <div class="tests-data" id="tests-data-{{ module.id }}" style="display: none;">
                                <div class="tests-header">
                                    <h6>List of Tests</h6>
                                    <div class="loading-indicator" id="loading-tests-{{ module.id }}" style="display: none;">
                                        <span>Loading...</span>
                                    </div>
                                </div>
                                <div class="tests-content">
                                    <div class="tests-table-container">
                                        <table class="tests-table">
                                            <thead>
                                                <tr>
                                                    <th>Test Name</th>
                                                    <th>Manhattan Plot</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tests-tbody-{{ module.id }}">
                                                <!-- Tests data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="sub-module-box" data-action="top-hits" data-module-id="{{ module.id }}">
                            <span class="sub-module-text">Top Hits</span>
                            
                            <!-- Top Hits data container positioned directly underneath -->
                            <div class="top-hits-data" id="top-hits-data-{{ module.id }}" style="display: none;">
                                <div class="top-hits-header">
                                    <h6>Top Hits</h6>
                                </div>
                                <div class="top-hits-content">
                                    <!-- Type of Report dropdown -->
                                    <div class="top-hits-section">
                                        <div class="section-label"><strong>Type of report:</strong></div>
                                        <div class="section-controls">
                                            <select class="top-hits-dropdown" id="report-type-dropdown-{{ module.id }}">
                                                <option value="P-value">P-value</option>
                                                <option value="QAS">QAS</option>
                                                <option value="density">density</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    
                                    <!-- Number of top hits dropdown -->
                                    <div class="top-hits-section">
                                        <div class="section-label"><strong>Number of top hits:</strong></div>
                                        <div class="section-controls">
                                            <select class="top-hits-dropdown" id="top-hits-count-dropdown-{{ module.id }}">
                                                <option value="100">100</option>
                                                <option value="500">500</option>
                                                <option value="1000" selected>1000</option>
                                                <option value="5000">5000</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <!-- CSV file checkbox -->
                                    <div class="top-hits-section">
                                        <div class="section-controls">
                                            <label class="checkbox-label">
                                                <input type="checkbox" id="csv-checkbox-{{ module.id }}" class="csv-checkbox">
                                                <span>Get .csv file</span>
                                            </label>
                                        </div>
                                    </div>
                                    
                                    <!-- Get Report button -->
                                    <div class="top-hits-section">
                                        <div class="section-controls">
                                            <button class="top-hits-btn get-report-btn" type="button" id="get-report-btn-{{ module.id }}">Get Report</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endif %}
    
    <div class="datasets-header">
        <h2 class="section-title">Public Datasets</h2>
        {% if publicModules is empty %}
            <p class="text-muted">No public datasets available at this time.</p>
        {% endif %}
    </div>
    
    {% if publicModules is not empty %}
        <div class="modules-list">
            {% for module in publicModules %}
                <div class="module-item">
                    <div class="module-box" data-module-id="{{ module.id }}">
                        <div class="module-content">
                            <h5 class="module-title">{{ module.name }}</h5>
                        </div>
                    </div>
                    <div class="sub-modules" id="sub-modules-{{ module.id }}" style="display: none;">
                        <div class="sub-module-box" data-module-id="{{ module.id }}" data-action="highway-browser">
                            <span class="sub-module-text">Highway Browser</span>
                            
                            <!-- Chromosome data container positioned directly underneath -->
                            <div class="chromosome-data" id="chromosome-data-{{ module.id }}" style="display: none;">
                                <div class="chromosome-header">
                                    <h6>Chromosome Data</h6>
                                    <div class="loading-indicator" style="display: none;">
                                        <span>Loading...</span>
                                    </div>
                                </div>
                                <div class="chromosome-content">
                                    <div class="chromosome-table-container">
                                        <table class="chromosome-table">
                                            <thead>
                                                <tr>
                                                    <th>Chromosome</th>
                                                    <th>Name</th>
                                                    <th>Length</th>
                                                </tr>
                                            </thead>
                                            <tbody id="chromosome-tbody-{{ module.id }}">
                                                <!-- Chromosome data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="sub-module-box" data-action="list-tests" data-module-id="{{ module.id }}">
                            <span class="sub-module-text">List of Tests and Manhattan Plots</span>
                            
                            <!-- Tests data container positioned directly underneath -->
                            <div class="tests-data" id="tests-data-{{ module.id }}" style="display: none;">
                                <div class="tests-header">
                                    <h6>List of Tests</h6>
                                    <div class="loading-indicator" id="loading-tests-{{ module.id }}" style="display: none;">
                                        <span>Loading...</span>
                                    </div>
                                </div>
                                <div class="tests-content">
                                    <div class="tests-table-container">
                                        <table class="tests-table">
                                            <thead>
                                                <tr>
                                                    <th>Test Name</th>
                                                    <th>Manhattan Plot</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tests-tbody-{{ module.id }}">
                                                <!-- Tests data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="sub-module-box" data-action="top-hits" data-module-id="{{ module.id }}">
                            <span class="sub-module-text">Top Hits</span>
                            
                            <!-- Top Hits data container positioned directly underneath -->
                            <div class="top-hits-data" id="top-hits-data-{{ module.id }}" style="display: none;">
                                <div class="top-hits-header">
                                    <h6>Top Hits</h6>
                                </div>
                                <div class="top-hits-content">
                                    <!-- Type of Report dropdown -->
                                    <div class="top-hits-section">
                                        <div class="section-label"><strong>Type of report:</strong></div>
                                        <div class="section-controls">
                                            <select class="top-hits-dropdown" id="report-type-dropdown-{{ module.id }}">
                                                <option value="P-value">P-value</option>
                                                <option value="QAS">QAS</option>
                                                <option value="density">density</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    
                                    <!-- Number of top hits dropdown -->
                                    <div class="top-hits-section">
                                        <div class="section-label"><strong>Number of top hits:</strong></div>
                                        <div class="section-controls">
                                            <select class="top-hits-dropdown" id="top-hits-count-dropdown-{{ module.id }}">
                                                <option value="100">100</option>
                                                <option value="500">500</option>
                                                <option value="1000" selected>1000</option>
                                                <option value="5000">5000</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <!-- CSV file checkbox -->
                                    <div class="top-hits-section">
                                        <div class="section-controls">
                                            <label class="checkbox-label">
                                                <input type="checkbox" id="csv-checkbox-{{ module.id }}" class="csv-checkbox">
                                                <span>Get .csv file</span>
                                            </label>
                                        </div>
                                    </div>
                                    
                                    <!-- Get Report button -->
                                    <div class="top-hits-section">
                                        <div class="section-controls">
                                            <button class="top-hits-btn get-report-btn" type="button" id="get-report-btn-{{ module.id }}">Get Report</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endif %}
</div>
{% endblock %}

{% block javascripts %}
<script>
// Simple test to see if JavaScript is working
console.log("Script is loading...");
alert("Script is loading!");

document.addEventListener("DOMContentLoaded", function() {
    console.log("DOM loaded!");
    alert("DOM loaded successfully!");
    
    // Simple test - just find module boxes and log them
    const moduleBoxes = document.querySelectorAll(".module-box");
    console.log("Found module boxes:", moduleBoxes.length);
    
    if (moduleBoxes.length > 0) {
        alert("Found " + moduleBoxes.length + " module boxes!");
        
        // Add click handler that toggles sub-modules visibility
        moduleBoxes.forEach(function(box) {
            box.addEventListener("click", function() {
                const moduleId = this.getAttribute("data-module-id");
                console.log("Module box clicked! ID:", moduleId);
                
                // Find the sub-modules container for this module
                const subModules = document.getElementById("sub-modules-" + moduleId);
                console.log("Sub modules element:", subModules);
                
                if (subModules) {
                    // Hide all other sub-modules first
                    const allSubModules = document.querySelectorAll(".sub-modules");
                    allSubModules.forEach(function(subModule) {
                        if (subModule.id !== "sub-modules-" + moduleId) {
                            subModule.style.display = "none";
                        }
                    });
                    
                    // Toggle visibility of current sub-modules
                    if (subModules.style.display === "none") {
                        console.log("Showing sub-modules for module:", moduleId);
                        subModules.style.display = "block";
                    } else {
                        console.log("Hiding sub-modules for module:", moduleId);
                        subModules.style.display = "none";
                    }
                } else {
                    console.error("Sub modules container not found for module:", moduleId);
                }
            });
        });
        
        // Function to close all sub-module data containers for a specific module
        function closeAllSubModuleData(moduleId) {
            const chromosomeData = document.getElementById("chromosome-data-" + moduleId);
            const testsData = document.getElementById("tests-data-" + moduleId);
            const topHitsData = document.getElementById("top-hits-data-" + moduleId);
            
            if (chromosomeData) chromosomeData.style.display = "none";
            if (testsData) testsData.style.display = "none";
            if (topHitsData) topHitsData.style.display = "none";
        }
        
        // Add click event listeners to Highway Browser sub-module boxes
        const highwayBrowserBoxes = document.querySelectorAll('.sub-module-box[data-action="highway-browser"]');
        console.log("Found highway browser boxes:", highwayBrowserBoxes.length);
        
        highwayBrowserBoxes.forEach(function(box) {
            box.addEventListener("click", function(e) {
                e.stopPropagation(); // Prevent triggering the parent module box click
                console.log("Highway Browser clicked for module:", this.getAttribute("data-module-id"));
                
                const moduleId = this.getAttribute("data-module-id");
                const chromosomeData = document.getElementById("chromosome-data-" + moduleId);
                
                if (chromosomeData) {
                    // Close all other sub-module data first
                    closeAllSubModuleData(moduleId);
                    
                    // Toggle chromosome data visibility
                    if (chromosomeData.style.display === "none") {
                        chromosomeData.style.display = "block";
                        console.log("Showing chromosome data for module:", moduleId);
                        
                        // Load chromosome data from API
                        loadChromosomeData(moduleId);
                    } else {
                        chromosomeData.style.display = "none";
                        console.log("Hiding chromosome data for module:", moduleId);
                    }
                }
            });
        });
        
        // Add click event listeners to List of Tests sub-module boxes
        const listTestsBoxes = document.querySelectorAll('.sub-module-box[data-action="list-tests"]');
        console.log("Found list tests boxes:", listTestsBoxes.length);
        
        listTestsBoxes.forEach(function(box) {
            box.addEventListener("click", function(e) {
                e.stopPropagation(); // Prevent triggering the parent module box click
                console.log("List of Tests clicked for module:", this.getAttribute("data-module-id"));
                
                const moduleId = this.getAttribute("data-module-id");
                const testsData = document.getElementById("tests-data-" + moduleId);
                
                if (testsData) {
                    // Close all other sub-module data first
                    closeAllSubModuleData(moduleId);
                    
                    // Toggle tests data visibility
                    if (testsData.style.display === "none") {
                        testsData.style.display = "block";
                        console.log("Showing tests data for module:", moduleId);
                        
                        // Load tests data from API
                        loadTestsData(moduleId);
                    } else {
                        testsData.style.display = "none";
                        console.log("Hiding tests data for module:", moduleId);
                    }
                }
            });
        });
        
        // Add click event listeners to Top Hits sub-module boxes
        const topHitsBoxes = document.querySelectorAll('.sub-module-box[data-action="top-hits"]');
        console.log("Found top hits boxes:", topHitsBoxes.length);
        
        topHitsBoxes.forEach(function(box) {
            box.addEventListener("click", function(e) {
                e.stopPropagation(); // Prevent triggering the parent module box click
                console.log("Top Hits clicked for module:", this.getAttribute("data-module-id"));
                
                const moduleId = this.getAttribute("data-module-id");
                const topHitsData = document.getElementById("top-hits-data-" + moduleId);
                
                if (topHitsData) {
                    // Close all other sub-module data first
                    closeAllSubModuleData(moduleId);
                    
                    // Toggle top hits data visibility
                    if (topHitsData.style.display === "none") {
                        topHitsData.style.display = "block";
                        console.log("Showing top hits data for module:", moduleId);
                        
                        // Add event listener to the Get Report button for this module
                        const getReportBtn = document.getElementById("get-report-btn-" + moduleId);
                        if (getReportBtn) {
                            console.log("Adding event listener to Get Report button for module:", moduleId);
                            getReportBtn.addEventListener("click", function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                console.log("Get Report button clicked for module:", moduleId);
                                
                                const topHitsCountDropdown = document.getElementById("top-hits-count-dropdown-" + moduleId);
                                const reportTypeDropdown = document.getElementById("report-type-dropdown-" + moduleId);
                                
                                if (!topHitsCountDropdown) {
                                    console.error("Top hits count dropdown not found for module:", moduleId);
                                    return;
                                }
                                
                                if (!reportTypeDropdown) {
                                    console.error("Report type dropdown not found for module:", moduleId);
                                    return;
                                }
                                
                                const selectedTopHitsCount = topHitsCountDropdown.value;
                                const selectedReportType = reportTypeDropdown.value;
                                const csvCheckbox = document.getElementById("csv-checkbox-" + moduleId);
                                const downloadCsv = csvCheckbox ? csvCheckbox.checked : false;
                                
                                console.log("Selected top hits count:", selectedTopHitsCount);
                                console.log("Selected report type:", selectedReportType);
                                console.log("Download CSV:", downloadCsv);
                                
                                if (downloadCsv) {
                                    // Download CSV first, then redirect
                                    downloadTopHitsCsv(moduleId, selectedTopHitsCount, selectedReportType);
                                }
                                
                                // Redirect to the top hits report page (without window size)
                                const reportUrl = `/top-hits-report/${moduleId}/${encodeURIComponent(selectedTopHitsCount)}/${encodeURIComponent(selectedReportType)}`;
                                console.log("Redirecting to:", reportUrl);
                                window.location.href = reportUrl;
                            });
                        } else {
                            console.error("Get Report button not found for module:", moduleId);
                        }
                    } else {
                        topHitsData.style.display = "none";
                        console.log("Hiding top hits data for module:", moduleId);
                    }
                }
            });
        });
    } else {
        alert("No module boxes found!");
    }
    
    // Function to load chromosome data from API
    function loadChromosomeData(moduleId) {
        console.log("Loading chromosome data for module:", moduleId);
        
        const tbody = document.getElementById("chromosome-tbody-" + moduleId);
        const loadingIndicator = document.querySelector("#chromosome-data-" + moduleId + " .loading-indicator");
        
        if (loadingIndicator) loadingIndicator.style.display = "block";
        
        // Fetch chromosome data from the API
        fetch(`/api/module/${moduleId}/chromosomes`)
            .then(response => {
                console.log("Chromosome API response status:", response.status);
                return response.json();
            })
            .then(data => {
                console.log("Chromosome API response data:", data);
                if (loadingIndicator) loadingIndicator.style.display = "none";
                
                if (data.success && data.data && data.data.length > 0) {
                    // Clear existing data
                    tbody.innerHTML = "";
                    
                    // Populate table with chromosome data
                    data.data.forEach(function(chromosome) {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td>${chromosome.chr}</td>
                            <td>${chromosome.chrname || "N/A"}</td>
                            <td>${chromosome.len ? chromosome.len.toLocaleString() : "N/A"}</td>
                        `;
                        tbody.appendChild(row);
                    });
                    
                    console.log("Chromosome data loaded successfully for module:", moduleId);
                } else {
                    let errorMessage = "No chromosome data available";
                    if (data.error) {
                        errorMessage = data.error;
                    }
                    tbody.innerHTML = `<tr><td colspan="3" class="text-center text-muted">${errorMessage}</td></tr>`;
                }
            })
            .catch(error => {
                console.error("Error fetching chromosome data:", error);
                if (loadingIndicator) loadingIndicator.style.display = "none";
                tbody.innerHTML = '<tr><td colspan="3" class="text-center text-danger">Error loading chromosome data</td></tr>';
            });
    }
    
    // Function to load tests data from API
    function loadTestsData(moduleId) {
        console.log("Loading tests data for module:", moduleId);
        
        const tbody = document.getElementById("tests-tbody-" + moduleId);
        const loadingIndicator = document.getElementById("loading-tests-" + moduleId);
        
        if (loadingIndicator) loadingIndicator.style.display = "block";
        
        // Fetch column data from the API
        fetch(`/api/module/${moduleId}/columns`)
            .then(response => {
                console.log("Tests API response status:", response.status);
                return response.json();
            })
            .then(data => {
                console.log("Tests API response data:", data);
                if (loadingIndicator) loadingIndicator.style.display = "none";
                
                if (data.success && data.data && data.data.length > 0) {
                    // Clear existing data
                    tbody.innerHTML = "";
                    
                    // Populate table with column data
                    data.data.forEach(function(column) {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td>${column.test || "Test " + column.col}</td>
                            <td class="text-center text-muted">-</td>
                        `;
                        tbody.appendChild(row);
                    });
                    
                    console.log("Tests data loaded successfully for module:", moduleId);
                } else {
                    let errorMessage = "No test data available";
                    if (data.error) {
                        errorMessage = data.error;
                    }
                    tbody.innerHTML = `<tr><td colspan="2" class="text-center text-muted">${errorMessage}</td></tr>`;
                }
            })
            .catch(error => {
                console.error("Error fetching tests data:", error);
                if (loadingIndicator) loadingIndicator.style.display = "none";
                tbody.innerHTML = '<tr><td colspan="2" class="text-center text-danger">Error loading test data</td></tr>';
            });
    }
    
    // Function to download top hits data as CSV
    function downloadTopHitsCsv(moduleId, topHitsCount, reportType) {
        console.log("Downloading CSV for module:", moduleId, "count:", topHitsCount, "type:", reportType);
        
        // Fetch CSV data from the API
        fetch(`/api/module/${moduleId}/top-hits-csv?count=${topHitsCount}&type=${encodeURIComponent(reportType)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.blob();
            })
            .then(blob => {
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `top-hits-${reportType}-${moduleId}-${topHitsCount}.csv`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                console.log("CSV download completed");
            })
            .catch(error => {
                console.error("Error downloading CSV:", error);
                alert("Error downloading CSV file. Please try again.");
            });
    }
});
</script>
{% endblock %}
